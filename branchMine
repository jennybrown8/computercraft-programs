function BranchMine(branches)
    if (turtle.getItemCount(16) == 0) then
     print "Oops! Please put torches in slot 16!"
     return
    end

    turtle.turnLeft()
    persistentUp()

    for b=1,branches do
	Tunnel(19)
	Tween()
    end

    turtle.turnRight()
    turtle.down()
end

function Tunnel(depth)
 print "Tunneling"
 -- Creates a two-block-high tunnel for a given number of blocks depth,
 -- leaving the turtle where it started and facing the same direction.
 for i=1,depth do
   turtle.dig()
   persistentForward()
   turtle.digDown()
   if ( (i%6) == 0) then
     turtle.select(16)
     turtle.placeDown()
   end
 end

 turtle.turnRight()
 turtle.turnRight()

 for i=1,depth do
   persistentForward()
 end
 turtle.digDown()
 turtle.down()
 turtle.turnRight()
 turtle.turnRight()
end

function persistentForward()
  success = false
  turtle.dig()
  while(success == false) do 
   success = turtle.forward()
   if (success == false) then
      turtle.dig()
   end
  end
end

function persistentUp()
  success = false
  turtle.digUp()
  while(success == false) do 
   success = turtle.up()
   if (success == false) then
      turtle.digUp()
   end
  end
end


function Tween()
 -- Creates a two-block-high main tunnel snippet to the location of
 -- the next branch tunnel.
 turtle.turnRight()

 persistentUp()

 for j=1,3 do
   persistentForward() 
   turtle.digDown()
 end

 turtle.turnLeft()

end

local args = { ... }
if #args ~= 1 then
  print "Rerun, with an argument for how many branches to build. Also load me with torches."
else
  local results= BranchMine(args[1])
end