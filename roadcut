-- persistent version of dig, in case of sand
function dig(dir)
  succeeded = false
  count = 0
  while (not succeeded) do
      if (dir == "f") then
          turtle.dig()
          succeeded = not turtle.detect()
      elseif (dir == "u") then
          turtle.digUp()
          succeeded = not turtle.detectUp()
      elseif (dir == "d") then
          turtle.digDown()
          succeeded = not turtle.detectDown()
      end 
      count = count + 1
      if (count > 40) then
          error("Aborted dig due to obstruction.")
      end
  end
end

-- persistent version of move, in case of animals
function move(dir)
  succeeded = false
  count = 0
  while (not succeeded) do
      if (dir == "f") then
          succeeded = turtle.forward()
      elseif (dir == "b") then
          succeeded = turtle.back()
      elseif (dir == "u") then
          succeeded = turtle.up()
      elseif (dir == "d") then
          succeeded = turtle.down()
      end 
      count = count + 1
      if (count > 20) then
          error("Aborted movement due to obstruction.")
      end
  end
end

function digAboveIfIndoors()
  blockWasAbove = false
  -- when no air above, ensure a 3-block high ceiling.
  while (turtle.detectUp()) do
      blockWasAbove = true
      turtle.digUp()
  end

  -- save fuel and speed if we're outdoors in the air, by not bothering about the ceiling.
  if (blockWasAbove) then
      move("u")
      while (turtle.detectUp()) do
          turtle.digUp()
      end
      move("d")
  end
end

-- one slice of the road
function layer()
  -- 1
  if (not turtle.detectDown()) then
      seekBlockInInventory()
      turtle.placeDown()
  end

  -- ceiling above 1
  digAboveIfIndoors()

  -- 2
  turtle.turnRight()
  if (not turtle.detect()) then
      seekBlockInInventory()
      turtle.place()
  end
  turtle.turnLeft()

  -- clear the path for next layer's #1
  dig("f")
  turtle.turnLeft()

  -- 3
  move("f")
  if (not turtle.detectDown()) then
      seekBlockInInventory()
      turtle.placeDown()
  end

  -- ceiling above 3
  digAboveIfIndoors()

  -- 4
  if (not turtle.detect()) then
      seekBlockInInventory()
      turtle.place()
  end
  turtle.turnRight()

  -- clear path for next layer's #3
  dig("f")
  turtle.turnRight()

  -- 1
  move("f")
  turtle.turnLeft()
  move("f")
end

function seekBlockInInventory()
  found = false
  slot = 1
  while(not found) do
     if (turtle.getItemCount(slot) == 0) then
        slot = slot + 1
     else
        found = true
        turtle.select(slot)
     end
     if (slot > 16) then
        found = true -- abort
        turtle.select(1)
     end
  end
end

function roadcut(dist)
  for i=1,dist do
    layer()
    if (i % 10 == 0) then
        print("Completed " .. i .. " / " .. dist)
    end
  end
end

local args = { ... }
if #args ~= 1 then
  print "Cuts a straight and level road and bridges, 2 blocks wide and 3 blocks tall, with low sides.  Preload"
  print "with cobble and 7 fuel per 1-block distance.  Will keep cutting even after running out of blocks."
  print "Usage: roadcut 100   for a 100-block distance of road."
else
  roadcut(args[1])
end

